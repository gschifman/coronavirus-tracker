covid_data <- read.csv(url("https://health.data.ny.gov/api/views/xdss-u53e/rows.csv?accessType=DOWNLOAD"), header=TRUE)

library("dplyr")
library("tidyr")
library("caTools")

colnames(covid_data) <- c("test_date","county","new_positives","cumulative_positives","new_tests","cumulative_tests")

covid_data$test_date <- as.Date(covid_data$test_date, "%m/%d/%Y")
covid_data$region <- case_when(
    covid_data$county %in% c("Bronx","Kings","New York","Queens","Richmond") ~ "new_york_city",
    covid_data$county %in% c("Nassau","Suffolk") ~ "long_island",
    covid_data$county %in% c("Dutchess","Orange","Putnam","Rockland","Westchester") ~ "lower_hudson_valley",
    !(covid_data$county %in% c("Bronx","Kings","New York","Queens","Richmond","Nassau","Suffolk","Dutchess","Orange","Putnam","Rockland","Westchester")) ~ "zRest")


#Population figures
census_data <- read.csv(url("https://www.census.gov/quickfacts/fact/csv/bronxcountybronxboroughnewyork,kingscountybrooklynboroughnewyork,newyorkcountymanhattanboroughnewyork,queenscountyqueensboroughnewyork,richmondcountystatenislandboroughnewyork,NY/PST120218"), header=TRUE)[1,c(3,5,7,9,11,13)]

colnames(census_data) <- c("Bronx","Brooklyn","Manhattan","Queens","Staten Island","New York State")

census_data$Bronx <- as.numeric(gsub(",","",census_data$Bronx))
census_data$Brooklyn <- as.numeric(gsub(",","",census_data$Brooklyn))
census_data$Manhattan <- as.numeric(gsub(",","",census_data$Manhattan))
census_data$Queens <- as.numeric(gsub(",","",census_data$Queens))
census_data$`Staten Island` <- as.numeric(gsub(",","",census_data$`Staten Island`))
census_data$`New York State` <- as.numeric(gsub(",","",census_data$`New York State`))

census_data <- gather(census_data, key="region", value="population_total")


#A fair amount of the data manipulation in this script is executed to accommodate the current iteration of the dashboard in Infogram

#Daily positive diagnoses
covid_positives <- covid_data %>%
    group_by(test_date, region) %>%
    summarise(total_positives=sum(new_positives), .groups='keep') %>% 
    spread(region, total_positives)

covid_positives <- arrange(covid_positives[,c(1,4,3,2)], test_date)
covid_positives$nyc_7day <- round(runmean(covid_positives$new_york_city, 7, align="right"), digits=0)
covid_positives$lohud_7day <- round(runmean(covid_positives$lower_hudson_valley, 7, align="right"), digits=0)
covid_positives$li_7day <- round(runmean(covid_positives$long_island, 7, align="right"), digits=0)


#Daily tests
covid_tests <- covid_data %>%
    group_by(test_date, region) %>%
    summarise(total_tests=sum(new_tests), .groups='keep') %>% 
    spread(region, total_tests)

covid_tests <- arrange(covid_tests[,c(1,4,3,2)], test_date)
covid_tests$nyc_7day <- round(runmean(covid_tests$new_york_city, 7, align="right"), digits=0)
covid_tests$lohud_7day <- round(runmean(covid_tests$lower_hudson_valley, 7, align="right"), digits=0)
covid_tests$li_7day <- round(runmean(covid_tests$long_island, 7, align="right"), digits=0)


#Positive case rates by borough
covid_boroughs <- covid_data[covid_data$county %in% c("Bronx","Kings","New York","Queens","Richmond"),] %>%
    group_by(county) %>%
    summarise(county_cases=max(cumulative_positives), .groups='keep')

covid_boroughs$county <- case_when(
        covid_boroughs$county=="Bronx" ~ "Bronx",
        covid_boroughs$county=="Kings" ~ "Brooklyn",
        covid_boroughs$county=="New York" ~ "Manhattan",
        covid_boroughs$county=="Queens" ~ "Queens",
        covid_boroughs$county=="Richmond" ~ "Staten Island")

covid_boroughs <- inner_join(covid_boroughs, census_data, by=c("county"="region"))
covid_boroughs$population_rate <- round(with(covid_boroughs, (population_total/county_cases)), digits=0)
#This HTML text is explicitly used in the Infogram dashboard
covid_boroughs$label_text <- with(covid_boroughs, paste(county," 1&nbsp;in&nbsp;",population_rate, sep=""))
covid_boroughs <- covid_boroughs[,c(1,4,2,3,5)]


#Hospitalizations
covid_hosp <- arrange(read.csv(url("https://covidtracking.com/api/v1/states/ny/daily.csv"), header=TRUE)[,c(1,6,8,17)], date)
colnames(covid_hosp) <- c("as_of_date","current_hosp","current_icu","total_deaths")
covid_hosp <- covid_hosp[covid_hosp$as_of_date>=20200326,]
covid_hosp$as_of_date <- as.Date(as.character(covid_hosp$as_of_date), "%Y%m%d")
#By subtracting with one day, the Covid Tracking Project data will align with the state's reporting
covid_hosp$as_of_date <- (covid_hosp$as_of_date-1)
covid_hosp$current_non_icu <- with(covid_hosp, (current_hosp-current_icu))
covid_hosp <- covid_hosp[,c(1,3,5,2,4)]


#Data frames can be exported with the write.table() function


#Various calculations that appear in the tracker
paste("New metro-area cases:", formatC(sum(covid_data[covid_data$region!="zRest" & covid_data$test_date==max(covid_hosp$as_of_date),]$new_positives), format="f", big.mark=",", digits=0))


paste("Portion of positives in the city: ",round((sum(covid_data[covid_data$region=="new_york_city",]$new_positives)/sum(covid_data$new_positives))*100, digits=1),"%", sep="")
paste("Total state cases:",formatC(sum(covid_data$new_positives), format="f", big.mark=",", digits=0))
paste("Total state deaths:",formatC(max(covid_hosp$total_deaths), format="f", big.mark=",", digits=0))


#Daily positivity rates
#Leaving out 3/2, which had the small sample of just a single test
covid_rates <- covid_data[covid_data$region!="zRest" & covid_data$test_date>"2020-03-02",] %>%
    group_by(test_date) %>%
    summarise(total_tests=sum(new_tests), daily_pos_rate=round((sum(new_positives)/sum(new_tests))*100,1), .groups='keep')


paste("Peak metro-area positive rate: ", covid_rates[which.max(covid_rates$daily_pos_rate),]$daily_pos_rate,"% on ",months(covid_rates[which.max(covid_rates$daily_pos_rate),]$test_date)," ",format(covid_rates[which.max(covid_rates$daily_pos_rate),]$test_date,"%d"),sep="")
paste("Overall metro-area positive test rate: ", with(covid_data[covid_data$region!="zRest",], round((sum(new_positives)/sum(new_tests))*100,1)),"%", sep="")
paste("Yesterday's metro-area positive rate: ", round(with(covid_data[covid_data$region!="zRest" & covid_data$test_date==max(covid_hosp$as_of_date),], (sum(new_positives)/sum(new_tests)))*100,1),"%", sep="")
